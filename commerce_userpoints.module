<?php

/**
 * @file
 * Hook implementations and API functions for the commerce_userpoints module.
 */

/**
 * Implements hook_help().
 */
function commerce_userpoints_help($path) {
  $help = '';
  switch ($path) {
    case 'admin/commerce/config/currency/userpoints':
      $help = t('This page allows to set up a virtual currency for each !points category. After this, it can for example be used to buy products with these !points.', userpoints_translation());
      break;
  }
  return $help;
}

/**
 * Implements hook_menu().
 */
function commerce_userpoints_menu() {
  $items['admin/commerce/config/currency/userpoints'] = array(
    'title' => '!Points currencies',
    'title arguments' => userpoints_translation(),
    'page callback' => 'commerce_userpoints_currencies_page',
    'access arguments' => array('configure store'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'commerce_userpoints.admin.inc',
  );
  $items['admin/commerce/config/currency/userpoints/add'] = array(
    'title' => 'Add a !points currency',
    'title arguments' => userpoints_translation(),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_userpoints_currencies_form'),
    'access arguments' => array('configure store'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'commerce_userpoints.admin.inc',
  );
  $items['admin/commerce/config/currency/userpoints/edit/%commerce_userpoints'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_userpoints_currencies_form', 6),
    'access arguments' => array('configure store'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'commerce_userpoints.admin.inc',
  );
  $items['admin/commerce/config/currency/userpoints/delete/%commerce_userpoints'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_userpoints_currencies_delete', 6),
    'access arguments' => array('configure store'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'commerce_userpoints.admin.inc',
  );

  return $items;
}

/**
 * Returns the currently configured userpoints currencies.
 *
 * @return
 *   An array of userpoints categories
 */
function commerce_userpoints_currencies() {
  return variable_get('commerce_userpoints_currencies', array());
}

/**
 * Load a userpoints currency based on the code.
 */
function commerce_userpoints_load($code) {
  $currencies = commerce_userpoints_currencies();
  if (isset($currencies[$code])) {
    return $currencies[$code];
  }
  return FALSE;
}

/**
 * Implements hook_currency_info().
 */
function commerce_userpoints_commerce_currency_info() {
  $currencies = array();
  foreach (commerce_userpoints_currencies() as $currency) {
    $currencies[$currency['code']] = array(
      'code' => $currency['code'],
      'symbol' => $currency['symbol'],
      'name' => $currency['name'],
      'format_callback' => 'commerce_userpoints_format_currency',
      'rounding_step' => '1',
    );
  }
  return $currencies;
}

/**
 * Currency format callback.
 */
function commerce_userpoints_format_currency($price, $currency, $context) {
  return t('@price !points', array('@price' => $price, '@name' => $currency['name']) + userpoints_translation());
}

/**
 * Provides a form widget to use points from a certain category.
 */
function commerce_userpoints_points_widget($form, &$form_state, $order) {
  $currencies = commerce_userpoints_currencies();

  if (empty($currencies)) {
    drupal_set_message(t('No !points currencies have been set up.', userpoints_translation()), 'error');
    return array();
  }

  $total = field_get_items('commerce_order', $order, 'commerce_order_total');
  $total = $total[0];

  $default_currency = reset($currencies);
  if (count($currencies) > 1) {
    $options = array();
    foreach ($currencies as $currency) {
      $options[$currency['code']] = $currency['name'];
    }

    $widget['currency'] = array(
      '#type' => 'select',
      '#title' => t('!Points currency', userpoints_translation()),
      '#options' => $options,
      '#default_value' => $default_currency['code'],
    );
  }
  else {
    $widget['currency'] = array(
      '#type' => 'value',
      '#value' => $default_currency['code'],
    );
  }

  if (isset($form_state['values']['currency'])) {
    $current_code = $form_state['values']['currency'];
    $current_tid = $currencies[$form_state['values']['currency']]['tid'];
  }
  else {
    $current_code = $default_currency['code'];
    $current_tid = $default_currency['tid'];
  }

  $worth_of_a_point = commerce_currency_convert(1, $current_code, $total['currency_code']);
  $worth_of_order = commerce_currency_convert($total['amount'], $total['currency_code'], $current_code) * 100;

  $arguments = array(
    '%points' => $worth_of_a_point,
    '@order_currency' => commerce_currency_format($worth_of_a_point, $total['currency_code']),
    '@count_needed' => commerce_currency_format($worth_of_order, $current_code),
  ) + userpoints_translation();

  $widget['info'] = array(
    '#type' => 'container',
    '#id' => 'commerce-userpoints-widget-info',
    'exchange' => array(
      '#type' => 'item',
      '#prefix' => '<div class="commerce-userpoints-exchange-rate">',
      '#title' => t('Exchange rate'),
      '#markup' => t('A !point is worth @order_currency. @count_needed to pay this order in full.', $arguments),
      '#suffix' => '</div>',
    ),
    'available' => array(
      '#type' => 'item',
      '#prefix' => '<div class="commerce-userpoints-available">',
      '#title' => t('Available'),
      '#markup' => t('You have @count !points available for use.', array('@count' => userpoints_get_current_points(NULL, $current_tid)) + userpoints_translation()),
      '#suffix' => '</div>',
    ),
  );

  $widget['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#description' => t('The amount of !points you want to use.', userpoints_translation()),
    '#size' => 10,
  );

  return $widget;
}